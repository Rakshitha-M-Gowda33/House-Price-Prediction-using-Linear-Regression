import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np


# 1. Load Dataset

df = pd.read_csv("House_prediction.csv")


# 2. Data Check

print("Dataset shape:", df.shape)
print("Missing values:\n", df.isnull().sum())
print("Duplicates:", df.duplicated().sum())


# 3. Select Features & Target

X = df[['Square_Footage', 'Num_Bedrooms', 'Num_Bathrooms']]
y = df['House_Price']


# 4. Train-Test Split

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)


# 5. Train Model (Linear Regression)

model = LinearRegression()
model.fit(X_train, y_train)


# 6. Predictions & Evaluation

y_pred = model.predict(X_test)
print("\nMean Squared Error:", mean_squared_error(y_test, y_pred))
print("R² Score:", r2_score(y_test, y_pred))
print("Intercept:", model.intercept_)
print("Coefficients:", model.coef_)


# 7. Cross-Validation

cv_scores = cross_val_score(model, X, y, cv=5, scoring='r2')
print("\nCross-Validation R² Scores:", cv_scores)
print("Average CV Score:", np.mean(cv_scores))


# 8. Visualization: Actual vs Predicted Prices

plt.figure(figsize=(6, 6))
plt.scatter(y_test, y_pred, alpha=0.6)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted House Prices (Linear Regression)")
plt.show()


# 9. Visualization: Feature Impact (Bar Graph)

coefficients = model.coef_
features = X.columns

plt.figure(figsize=(8, 5))
sns.barplot(x=features, y=coefficients, palette="viridis")
plt.title("Feature Impact on House Price")
plt.ylabel("Price Change per Unit Increase")
plt.xlabel("Features")
plt.show()


# 10. Visualization: Correlation Heatmap

plt.figure(figsize=(8, 6))
corr_matrix = df[['Square_Footage', 'Num_Bedrooms', 'Num_Bathrooms', 'House_Price']].corr()
sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()


# 11. Custom Prediction Function

def predict_price(square_footage, bedrooms, bathrooms):
    data = pd.DataFrame([[square_footage, bedrooms, bathrooms]],
                        columns=['Square_Footage', 'Num_Bedrooms', 'Num_Bathrooms'])
    price = model.predict(data)[0]
    return price

# Example usage:
example_price = predict_price(2000, 3, 2)
print(f"\nPredicted price for 2000 sqft, 3 bed, 2 bath: {example_price:,.2f}")
